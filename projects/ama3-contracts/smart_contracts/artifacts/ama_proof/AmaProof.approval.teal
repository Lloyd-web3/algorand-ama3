#pragma version 10

smart_contracts.ama_proof.contract.AmaProof.approval_program:
    txn ApplicationID
    bnz main_entrypoint@2
    callsub __init__

main_entrypoint@2:
    // smart_contracts/ama_proof/contract.py:5
    // class AmaProof(ARC4Contract):
    txn NumAppArgs
    bz main_bare_routing@7
    method "confirm_joined()void"
    txna ApplicationArgs 0
    match main_confirm_joined_route@4
    err // reject transaction

main_confirm_joined_route@4:
    // smart_contracts/ama_proof/contract.py:15-16
    // # -->>> Region:: START  --->>>  Confirm
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is NoOp
    txn ApplicationID
    assert // is not creating
    callsub confirm_joined
    int 1
    return

main_bare_routing@7:
    // smart_contracts/ama_proof/contract.py:5
    // class AmaProof(ARC4Contract):
    txn OnCompletion
    !
    assert // reject transaction
    txn ApplicationID
    !
    assert // is creating
    int 1
    return


// smart_contracts.ama_proof.contract.AmaProof.confirm_joined() -> void:
confirm_joined:
    // smart_contracts/ama_proof/contract.py:15-17
    // # -->>> Region:: START  --->>>  Confirm
    // @abimethod()
    // def confirm_joined(self) -> None:
    proto 0 0
    // smart_contracts/ama_proof/contract.py:18-19
    // # Assert Require
    // assert self.total_viewer < self.max_viewer, "Maximum"
    int 0
    // smart_contracts/ama_proof/contract.py:13
    // self.total_viewer = UInt64(0);
    byte "total_viewer"
    // smart_contracts/ama_proof/contract.py:18-19
    // # Assert Require
    // assert self.total_viewer < self.max_viewer, "Maximum"
    app_global_get_ex
    assert // check self.total_viewer exists
    int 0
    // smart_contracts/ama_proof/contract.py:11
    // self.max_viewer = UInt64(30)
    byte "max_viewer"
    // smart_contracts/ama_proof/contract.py:18-19
    // # Assert Require
    // assert self.total_viewer < self.max_viewer, "Maximum"
    app_global_get_ex
    assert // check self.max_viewer exists
    <
    assert // Maximum
    // smart_contracts/ama_proof/contract.py:20-21
    // # Execute
    // minted_asset = self._mint_pov(Txn.sender)
    txn Sender
    callsub _mint_pov
    // smart_contracts/ama_proof/contract.py:22-23
    // # self.total_viewer = self.total_viewer + 1
    // self.total_viewer += 1
    int 0
    // smart_contracts/ama_proof/contract.py:13
    // self.total_viewer = UInt64(0);
    byte "total_viewer"
    // smart_contracts/ama_proof/contract.py:22-23
    // # self.total_viewer = self.total_viewer + 1
    // self.total_viewer += 1
    app_global_get_ex
    assert // check self.total_viewer exists
    int 1
    +
    // smart_contracts/ama_proof/contract.py:13
    // self.total_viewer = UInt64(0);
    byte "total_viewer"
    // smart_contracts/ama_proof/contract.py:22-23
    // # self.total_viewer = self.total_viewer + 1
    // self.total_viewer += 1
    swap
    app_global_put
    // smart_contracts/ama_proof/contract.py:25-28
    // # Luu tru thong tin nguoi tham gia
    // # mapping(address -> asset.id)
    // # address -> value
    // _id, already_exists = algopy.op.Box.get(Txn.sender.bytes)
    txn Sender
    box_get
    bury 1
    // smart_contracts/ama_proof/contract.py:29-30
    // # true -> not true -> false -> error
    // assert not already_exists, "Already claim POV"
    !
    assert // Already claim POV
    // smart_contracts/ama_proof/contract.py:32-33
    // # input address -> Box
    // algopy.op.Box.put(Txn.sender.bytes, algopy.op.itob(minted_asset.id))
    txn Sender
    swap
    itob
    box_put
    retsub


// smart_contracts.ama_proof.contract.AmaProof._mint_pov(claimer: bytes) -> uint64:
_mint_pov:
    // smart_contracts/ama_proof/contract.py:37-39
    // # -->>> Internal:: START  --->>>  Function Mint NFT
    // @subroutine
    // def _mint_pov(self, claimer: Account) -> Asset:
    proto 1 1
    // smart_contracts/ama_proof/contract.py:40-41
    // # ASA -> Algorand Standard Assets
    // algopy.ensure_budget(UInt64(10000), algopy.OpUpFeeSource.AppAccount)
    int 10000
    int 1
    callsub ensure_budget
    // smart_contracts/ama_proof/contract.py:42
    // asset_name = b"Openedu Algorand #" + claimer.bytes
    byte 0x4f70656e65647520416c676f72616e642023
    frame_dig -1
    concat
    // smart_contracts/ama_proof/contract.py:44-51
    // algopy.itxn.AssetConfig(
    //     asset_name=asset_name,
    //     unit_name=String("EDU"),
    //     url=self.asset_url,
    //     manager=claimer,
    //     total=UInt64(1),
    //     decimals=0
    // ).submit().created_asset # asset.id
    itxn_begin
    // smart_contracts/ama_proof/contract.py:47
    // url=self.asset_url,
    int 0
    // smart_contracts/ama_proof/contract.py:12
    // self.asset_url = String("ipfs://...0xla")
    byte "asset_url"
    // smart_contracts/ama_proof/contract.py:47
    // url=self.asset_url,
    app_global_get_ex
    assert // check self.asset_url exists
    // smart_contracts/ama_proof/contract.py:50
    // decimals=0
    int 0
    itxn_field ConfigAssetDecimals
    // smart_contracts/ama_proof/contract.py:49
    // total=UInt64(1),
    int 1
    itxn_field ConfigAssetTotal
    frame_dig -1
    itxn_field ConfigAssetManager
    itxn_field ConfigAssetURL
    // smart_contracts/ama_proof/contract.py:46
    // unit_name=String("EDU"),
    byte "EDU"
    itxn_field ConfigAssetUnitName
    itxn_field ConfigAssetName
    // smart_contracts/ama_proof/contract.py:44
    // algopy.itxn.AssetConfig(
    int acfg
    itxn_field TypeEnum
    int 0
    itxn_field Fee
    // smart_contracts/ama_proof/contract.py:44-51
    // algopy.itxn.AssetConfig(
    //     asset_name=asset_name,
    //     unit_name=String("EDU"),
    //     url=self.asset_url,
    //     manager=claimer,
    //     total=UInt64(1),
    //     decimals=0
    // ).submit().created_asset # asset.id
    itxn_submit
    itxn CreatedAssetID
    // smart_contracts/ama_proof/contract.py:43-52
    // return (
    //     algopy.itxn.AssetConfig(
    //         asset_name=asset_name,
    //         unit_name=String("EDU"),
    //         url=self.asset_url,
    //         manager=claimer,
    //         total=UInt64(1),
    //         decimals=0
    //     ).submit().created_asset # asset.id
    // )
    retsub


// algopy.ensure_budget(required_budget: uint64, fee_source: uint64) -> void:
ensure_budget:
    // <algopy>/algopy.py:11-17
    proto 2 0
    // <algopy>/algopy.py:18
    frame_dig -2
    int 10
    +

ensure_budget_while_top@1:
    // <algopy>/algopy.py:19
    frame_dig 0
    global OpcodeBudget
    >
    bz ensure_budget_after_while@7
    // <algopy>/algopy.py:20
    itxn_begin
    // <algopy>/algopy.py:21
    int appl
    itxn_field TypeEnum
    // <algopy>/algopy.py:22
    int DeleteApplication
    itxn_field OnCompletion
    // <algopy>/algopy.py:23
    byte 0x068101
    itxn_field ApprovalProgram
    // <algopy>/algopy.py:24
    byte 0x068101
    itxn_field ClearStateProgram
    // <algopy>/algopy.py:25-29
    frame_dig -1
    switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_0@3:
    // <algopy>/algopy.py:27
    int 0
    itxn_field Fee
    b ensure_budget_switch_case_next@6

ensure_budget_switch_case_1@4:
    // <algopy>/algopy.py:29
    global MinTxnFee
    itxn_field Fee

ensure_budget_switch_case_next@6:
    // <algopy>/algopy.py:30
    itxn_submit
    b ensure_budget_while_top@1

ensure_budget_after_while@7:
    retsub


// smart_contracts.ama_proof.contract.AmaProof.__init__() -> void:
__init__:
    // smart_contracts/ama_proof/contract.py:10
    // def __init__(self) -> None:
    proto 0 0
    // smart_contracts/ama_proof/contract.py:11
    // self.max_viewer = UInt64(30)
    byte "max_viewer"
    int 30
    app_global_put
    // smart_contracts/ama_proof/contract.py:12
    // self.asset_url = String("ipfs://...0xla")
    byte "asset_url"
    byte "ipfs://...0xla"
    app_global_put
    // smart_contracts/ama_proof/contract.py:13
    // self.total_viewer = UInt64(0);
    byte "total_viewer"
    int 0
    app_global_put
    retsub
